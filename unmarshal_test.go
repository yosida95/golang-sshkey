package sshkey

import (
	"crypto"
	"crypto/dsa"
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rsa"
	"io/ioutil"
	"math/big"
	"reflect"
	"testing"
)

type unmarshalOpenSSHPublicKeyCase struct {
	path string

	keyType Type
	public  crypto.PublicKey
	length  int
	comment string
}

var (
	unmarshalOpenSSHPublicKeyCases = []unmarshalOpenSSHPublicKeyCase{
		{
			path:    "testdata/rsa.pub",
			keyType: KEY_RSA,
			public: &rsa.PublicKey{
				E: 65537,
				N: new(big.Int).SetBytes([]byte{
					0x00, 0xe8, 0x0e, 0x7b, 0x34, 0x5e, 0x84, 0x1a, 0x89, 0x21, 0x1e, 0x20, 0xd4, 0xc5, 0xce,
					0xf5, 0xe9, 0xaa, 0x05, 0x53, 0xdb, 0xa1, 0x50, 0x92, 0xed, 0x3c, 0x27, 0xb8, 0xb2, 0x6f,
					0x2f, 0x1a, 0xdd, 0xdc, 0x7e, 0x16, 0x34, 0x6e, 0x65, 0xf6, 0x82, 0x6f, 0x6e, 0xbc, 0x4d,
					0x19, 0xf2, 0x33, 0xf0, 0x7f, 0x25, 0xf8, 0x6d, 0xe9, 0x7a, 0xc7, 0xbc, 0xca, 0x7d, 0xe1,
					0x09, 0xc7, 0x00, 0xd6, 0x94, 0x38, 0xfd, 0xc5, 0x44, 0x19, 0x6e, 0xf5, 0x79, 0x73, 0x57,
					0x68, 0x01, 0x9b, 0x39, 0xfa, 0x49, 0xfd, 0x57, 0xb6, 0xf8, 0xba, 0x3a, 0xa0, 0x63, 0x8e,
					0x4c, 0x52, 0xdb, 0x20, 0xb9, 0x84, 0x00, 0xf1, 0xb7, 0x69, 0x23, 0xc6, 0x83, 0x9d, 0x4a,
					0xfe, 0x00, 0x2f, 0x54, 0xe2, 0x3e, 0x84, 0x23, 0xf9, 0xd9, 0xf3, 0x12, 0xe8, 0x22, 0x9a,
					0xc7, 0xa6, 0x13, 0xc1, 0x5d, 0xe5, 0xdf, 0xc6, 0x2e, 0x44, 0xed, 0x58, 0x0f, 0xf9, 0x34,
					0xc8, 0xca, 0xf3, 0x9c, 0xd2, 0x3b, 0x88, 0x40, 0xf6, 0x73, 0x6c, 0xb3, 0x42, 0x0d, 0x6b,
					0x59, 0xca, 0x43, 0xdf, 0x6f, 0xda, 0x20, 0xfb, 0xb3, 0xd4, 0xd7, 0x58, 0xb3, 0x32, 0xe0,
					0x3e, 0x7d, 0x3b, 0x66, 0x2f, 0x77, 0xa5, 0xb3, 0x51, 0x13, 0x17, 0x86, 0x35, 0x5d, 0xc1,
					0x68, 0xc1, 0xb1, 0x2f, 0x31, 0xd5, 0x9a, 0x4a, 0x24, 0x0a, 0xf6, 0xf0, 0xc7, 0x32, 0x1e,
					0x16, 0xab, 0xca, 0x7d, 0x11, 0x41, 0xee, 0x54, 0x26, 0x17, 0x77, 0x5d, 0x5e, 0x4e, 0xa9,
					0x4c, 0x00, 0x16, 0x97, 0xe1, 0xa1, 0xd4, 0x8f, 0x1a, 0xd6, 0x4d, 0x14, 0x5f, 0x45, 0xf5,
					0xa5, 0x7d, 0x8f, 0x1b, 0xf3, 0x5f, 0x3f, 0xa6, 0xce, 0x84, 0xc8, 0x4a, 0x73, 0xaf, 0xa9,
					0xdb, 0x56, 0x91, 0xa3, 0x5d, 0x68, 0x0e, 0x04, 0x2a, 0x20, 0x3d, 0x88, 0x22, 0x75, 0xb8,
					0x31, 0x43,
				}),
			},
			length:  2048,
			comment: "yosida95@yosida95",
		},
		{
			path:    "testdata/dsa.pub",
			keyType: KEY_DSA,
			public: &dsa.PublicKey{
				Parameters: dsa.Parameters{
					P: new(big.Int).SetBytes([]byte{
						0x00, 0x8f, 0xda, 0xc1, 0x44, 0x27, 0xb3, 0x6f, 0x5e, 0x69, 0xad, 0x43, 0x87, 0x13, 0xe8,
						0xb2, 0xda, 0x73, 0xe2, 0x83, 0xca, 0x83, 0x21, 0xc5, 0x70, 0x63, 0x6e, 0x6f, 0x06, 0xa7,
						0xf9, 0xaa, 0x5b, 0x45, 0x21, 0x09, 0xf8, 0x02, 0x09, 0x97, 0xa8, 0xe0, 0x5e, 0x6f, 0x0a,
						0x62, 0x31, 0x47, 0x2b, 0x56, 0xcd, 0x8a, 0x26, 0x3d, 0xe9, 0x65, 0xb3, 0x36, 0xb3, 0xe0,
						0x0c, 0x87, 0x7b, 0xbc, 0x54, 0x06, 0x8a, 0xf4, 0xcd, 0xdc, 0x79, 0x54, 0x42, 0x68, 0x29,
						0x67, 0x8c, 0x2e, 0xd4, 0x75, 0x07, 0x9f, 0x5b, 0xe1, 0x43, 0x0b, 0x39, 0xa5, 0x07, 0x93,
						0xb3, 0x16, 0x44, 0x5f, 0x7d, 0x16, 0x31, 0x5e, 0x3b, 0x54, 0x4d, 0x85, 0xac, 0x26, 0x80,
						0xe6, 0x94, 0x5a, 0x15, 0x3f, 0xf6, 0x99, 0x34, 0x58, 0x4e, 0xb0, 0xcc, 0xf3, 0x57, 0xc3,
						0x8a, 0xbf, 0x97, 0x50, 0x09, 0xb4, 0x06, 0x03, 0xa7,
					}),
					Q: new(big.Int).SetBytes([]byte{
						0x00, 0xed, 0x04, 0x5d, 0x41, 0x18, 0x04, 0x3c, 0x23, 0x1f, 0x4e, 0x83, 0xf5, 0xc1, 0x74,
						0x4e, 0x77, 0x06, 0x43, 0x1f, 0x5f,
					}),
					G: new(big.Int).SetBytes([]byte{
						0x39, 0x4f, 0xcc, 0x18, 0x0e, 0xc8, 0xd2, 0xcf, 0x35, 0x3e, 0x25, 0x3d, 0x7f, 0xb5, 0x82,
						0xde, 0xaa, 0x39, 0xa9, 0xa8, 0xad, 0x3f, 0x0f, 0x43, 0xc0, 0xa3, 0x00, 0x8e, 0xcd, 0x52,
						0xeb, 0x46, 0xb6, 0xd2, 0x1a, 0xe5, 0xdb, 0xa3, 0x40, 0x9c, 0xda, 0xbe, 0xff, 0xc9, 0xbe,
						0x38, 0xde, 0x23, 0x3e, 0xda, 0x3a, 0x62, 0xe0, 0xf8, 0xdd, 0x75, 0x95, 0xbb, 0x4b, 0xdb,
						0x28, 0xd9, 0x51, 0x89, 0x56, 0x34, 0x8c, 0xe8, 0x11, 0x5c, 0x69, 0xd4, 0x05, 0xf2, 0x3d,
						0x26, 0xae, 0x29, 0xcb, 0x37, 0x52, 0xf9, 0xee, 0xe4, 0x89, 0x1c, 0xe6, 0x5c, 0x09, 0x9c,
						0x80, 0xc8, 0x0d, 0x62, 0x66, 0xf6, 0x20, 0x46, 0x8d, 0x44, 0x17, 0x30, 0x11, 0x40, 0x77,
						0x82, 0x6c, 0xf1, 0x23, 0x20, 0xaa, 0x86, 0xc3, 0x8e, 0x62, 0x39, 0xd0, 0x99, 0x5a, 0xe3,
						0x01, 0x36, 0xb0, 0x46, 0x9f, 0xd2, 0x0e, 0xce,
					}),
				},
				Y: new(big.Int).SetBytes([]byte{
					0x35, 0x05, 0xdf, 0x92, 0x54, 0xb4, 0x2b, 0x70, 0xb4, 0x0b, 0xeb, 0xb7, 0x45, 0x1b, 0x84,
					0x5e, 0xc4, 0x7b, 0xb1, 0xc9, 0xe2, 0xb7, 0x53, 0x83, 0xec, 0x27, 0x81, 0xc9, 0xf9, 0x80,
					0x17, 0x0b, 0x9c, 0x26, 0xf0, 0xf1, 0x26, 0x06, 0xd9, 0x72, 0xb5, 0x1b, 0xe8, 0xbc, 0xa9,
					0xdf, 0x95, 0xce, 0x0c, 0x9e, 0xda, 0x28, 0xe0, 0x20, 0xb0, 0x9e, 0xe4, 0x85, 0xf7, 0xb0,
					0x44, 0x11, 0xf5, 0x24, 0xec, 0xd7, 0x71, 0x4e, 0x87, 0x8e, 0x08, 0x2b, 0xc7, 0x50, 0x1d,
					0xea, 0x26, 0xe2, 0xcd, 0x40, 0x0c, 0xaf, 0xcf, 0xb1, 0xa1, 0x0a, 0x02, 0xb1, 0xe6, 0xf2,
					0xe9, 0xb5, 0xc9, 0xa0, 0x57, 0xe5, 0xe8, 0x84, 0xa6, 0xa9, 0xae, 0xc8, 0x94, 0xba, 0x6d,
					0xe5, 0xb5, 0xf9, 0x57, 0xed, 0xab, 0x3c, 0x1e, 0x9c, 0x60, 0x6e, 0xb6, 0x1e, 0x18, 0x40,
					0x06, 0x05, 0x83, 0x04, 0xc3, 0xe0, 0xcb, 0xb6,
				}),
			},
			length:  1024,
			comment: "yosida95@yosida95",
		},
		{
			path:    "testdata/ecdsa.pub",
			keyType: KEY_ECDSA,
			length:  521,
			public: &ecdsa.PublicKey{
				Curve: elliptic.P521(),
				X: new(big.Int).SetBytes([]byte{
					1, 231, 241, 76, 184, 31, 235, 100, 241, 237, 107, 113, 60, 67, 237, 198, 54, 144, 195, 251, 91,
					205, 146, 84, 248, 62, 221, 38, 116, 181, 143, 7, 3, 114, 21, 177, 22, 134, 95, 60, 55, 166, 62, 28,
					115, 68, 26, 159, 153, 155, 11, 175, 166, 134, 135, 249, 99, 229, 117, 128, 152, 198, 101, 6, 209,
					4,
				}),
				Y: new(big.Int).SetBytes([]byte{
					250, 0, 164, 4, 27, 240, 163, 199, 201, 195, 250, 158, 187, 88, 136, 223,
					2, 37, 95, 0, 131, 128, 241, 32, 239, 196, 242, 7, 87, 87, 24, 185, 120, 248, 191, 156, 85, 127, 236,
					61, 188, 173, 68, 48, 173, 165, 2, 198, 67, 60, 183, 219, 124, 83, 137, 36, 57, 64, 84, 94, 126, 22,
					232, 69, 143,
				}),
			},
			comment: "yosida95@yosida95",
		},
	}
)

func TestUnmarshalOpenSSHPublicKey(t *testing.T) {
	for _, c := range unmarshalOpenSSHPublicKeyCases {
		key, err := ioutil.ReadFile(c.path)
		if err != nil {
			panic(err)
		}
		pub, err := UnmarshalOpenSSHPublicKey(string(key))
		if err != nil {
			t.Error(err)
			continue
		}

		if pub.GetType() != c.keyType {
			t.Fail()
		}
		if !reflect.DeepEqual(pub.GetPublic(), c.public) {
			t.Fail()
		}
		if pub.GetLength() != c.length {
			t.Fail()
		}
		if pub.GetComment() != c.comment {
			t.Fail()
		}
	}
}
